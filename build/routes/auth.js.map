{"version":3,"sources":["../../server/routes/auth.js"],"names":["app","express","Router","debug","Debug","comparePasswords","providedPassword","userPassword","handleFailed","res","error","message","status","json","createdToken","user","jwt","sign","secret","expiresIn","post","req","body","email","password","User","findOne","token","user_id","_id","firstName","lastName","u","save","userId","id"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\r\nimport Debug from 'debug'\r\nimport jwt from 'jsonwebtoken'\r\nimport { secret } from './../config'\r\nimport { User } from './../models'\r\nimport {\r\n  hashSync,\r\n  compareSync\r\n} from 'bcryptjs'\r\n\r\n\r\nconst app = express.Router()\r\nconst debug = new Debug('platzi-overflow:auth')\r\n\r\nconst comparePasswords = (providedPassword, userPassword) => compareSync(providedPassword, userPassword)\r\n\r\nconst handleFailed = (res, error, message) => {\r\n  return res.status(401).json({\r\n    message: message,\r\n    error\r\n  })\r\n}\r\n\r\nconst createdToken = (user) => jwt.sign({ user }, secret, { expiresIn: 86400 })\r\n\r\napp.post('/signin', async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body\r\n  \r\n    const user = await User.findOne({ email })\r\n\r\n    if (!user) {\r\n      debug(`User with email ${email} not found`)\r\n      return handleFailed(res, error)\r\n    }\r\n  \r\n    if (!comparePasswords(password, user.password)) {\r\n      debug(`Passwords do not maych: ${password} !== ${user.password}`)\r\n      return handleFailed(res, error, 'El correo y la contraseÃ±a no coinciden')\r\n    }\r\n  \r\n    const token = createdToken(user)\r\n  \r\n    res.status(200).json({\r\n      message: 'Login succeded',\r\n      token,\r\n      user_id: user._id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email\r\n    })\r\n  } catch (error) {\r\n    handleFailed(res, error, 'Login failed')\r\n  }\r\n})\r\n\r\napp.post('/signup', async (req, res) => {\r\n  try {\r\n    const { firstName, lastName, email, password } = req.body\r\n    \r\n    const u = new User({\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      password: hashSync(password, 10)\r\n    })\r\n  \r\n    debug(`Creating new user: ${u}`)\r\n  \r\n    const user = await u.save()\r\n  \r\n    const token = createdToken(user)\r\n  \r\n    res.status(201).json({\r\n      message: 'User saved',\r\n      token,\r\n      userId: user.id,\r\n      firstName,\r\n      lastName,\r\n      email\r\n    })\r\n  } catch (error) {\r\n    handleFailed(res, error, 'Register failed')\r\n  }\r\n})\r\n\r\nexport default app"]}