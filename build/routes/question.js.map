{"version":3,"sources":["../../server/routes/question.js"],"names":["app","express","Router","get","req","res","sort","query","question","findAll","questions","status","json","post","required","body","title","description","icon","q","user","_id","create","savedQuestion","questionMiddleware","findById","a","createdAt","Date","User","createAnswer","savedAnswer"],"mappings":";;;;;;AAAA;;;;AAEA;;AAKA;;AAEA;;AAEA;;;;;;AAGA,IAAMA,MAAMC,kBAAQC,MAAR,EAAZ;;AAEAF,IAAIG,GAAJ,CAAQ,GAAR;AAAA,qEAAa,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,gBAFC,GAESF,IAAIG,KAFb,CAEDD,IAFC;AAAA;AAAA,mBAGeE,gBAASC,OAAT,CAAiBH,IAAjB,CAHf;;AAAA;AAGHI,qBAHG;;AAITL,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,SAArB;AAJS;AAAA;;AAAA;AAAA;AAAA;;AAMT,iDAAmBL,GAAnB;;AANS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA;;AAUAL,IAAIa,IAAJ,CAAS,GAAT,EAAcC,qBAAd;AAAA,sEAAwB,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEiBD,IAAIW,IAFrB,EAEZC,KAFY,aAEZA,KAFY,EAELC,WAFK,aAELA,WAFK,EAEQC,IAFR,aAEQA,IAFR;AAIdC,aAJc,GAIV;AACRH,0BADQ;AAERC,sCAFQ;AAGRC,wBAHQ;AAIRE,oBAAMhB,IAAIgB,IAAJ,CAASC;AAJP,aAJU;AAAA;AAAA,mBAWQb,gBAASc,MAAT,CAAgBH,CAAhB,CAXR;;AAAA;AAWdI,yBAXc;;;AAapBlB,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,aAArB;AAboB;AAAA;;AAAA;AAAA;AAAA;;AAepB,kDAAmBlB,GAAnB;;AAfoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAmBAL,IAAIG,GAAJ,CAAQ,MAAR,EAAgBqB,+BAAhB;AAAA,sEAAoC,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEhBG,gBAASiB,QAAT,CAAkBrB,IAAII,QAAtB,CAFgB;;AAAA;AAE1BW,aAF0B;;AAGhCd,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,CAArB;AAHgC;AAAA;;AAAA;AAAA;AAAA;;AAKhC,kDAAmBd,GAAnB;;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAUAL,IAAIa,IAAJ,CAAS,cAAT,EAAyBC,qBAAzB,EAAmCU,+BAAnC;AAAA,sEAAuD,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7CqB,aAF6C,GAEzCtB,IAAIW,IAFqC;AAG7CI,aAH6C,GAGzCf,IAAII,QAHqC;;AAInDkB,cAAEC,SAAF,GAAc,CAAC,IAAIC,IAAJ,EAAf;AACAF,cAAEN,IAAF,GAAS,IAAIS,YAAJ,CAASzB,IAAIgB,IAAb,CAAT;;AALmD;AAAA,mBAOzBZ,gBAASsB,YAAT,CAAsBX,CAAtB,EAAyBO,CAAzB,CAPyB;;AAAA;AAO7CK,uBAP6C;;;AASnD1B,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBmB,WAArB;AATmD;AAAA;;AAAA;AAAA;AAAA;;AAWnD,kDAAmB1B,GAAnB;;AAXmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvD;;AAAA;AAAA;AAAA;AAAA;;kBAeeL,G","file":"question.js","sourcesContent":["import express from 'express'\r\n\r\nimport {\r\n  required,\r\n  questionMiddleware\r\n} from './../middlewares'\r\n\r\nimport { User } from './../models'\r\n\r\nimport { question } from './../db-api'\r\n\r\nimport { handleError } from './../utils'\r\n\r\n\r\nconst app = express.Router()\r\n\r\napp.get('/', async (req, res) => {\r\n  try {\r\n    const { sort }  = req.query\r\n    const questions = await question.findAll(sort)\r\n    res.status(200).json(questions)\r\n  } catch (error) {\r\n    handleError(error, res)\r\n  }\r\n})\r\n\r\napp.post('/', required, async (req, res) => {\r\n  try {\r\n    const { title, description, icon } = req.body\r\n    \r\n    const q = {\r\n      title,\r\n      description,\r\n      icon,\r\n      user: req.user._id\r\n    }\r\n\r\n    const savedQuestion = await question.create(q)\r\n\r\n    res.status(201).json(savedQuestion)\r\n  } catch (error) {\r\n    handleError(error, res)\r\n  }\r\n})\r\n\r\napp.get('/:id', questionMiddleware, async (req, res) => {\r\n  try {\r\n    const q = await question.findById(req.question)\r\n    res.status(200).json(q)\r\n  } catch (error) {\r\n    handleError(error, res)\r\n  }\r\n})\r\n\r\n\r\napp.post('/:id/answers', required, questionMiddleware, async (req, res) => {\r\n  try {\r\n    const a = req.body\r\n    const q = req.question\r\n    a.createdAt = +new Date()\r\n    a.user = new User(req.user)\r\n\r\n    const savedAnswer = await question.createAnswer(q, a)\r\n  \r\n    res.status(201).json(savedAnswer)\r\n  } catch (error) {\r\n    handleError(error, res)\r\n  }\r\n})\r\n\r\nexport default app"]}